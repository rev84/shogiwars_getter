// Generated by CoffeeScript 1.12.7
var Utl;

window.results = [];

window.isGettingList = false;

window.gType = null;

window.getKifuData = {};

window.url = null;

window.GET_LIMIT = 1000;

window.ENDING = {
  TIME_UP: ['SENTE_WIN_DISCONNECT', 'SENTE_WIN_TIMEOUT', 'GOTE_WIN_DISCONNECT', 'GOTE_WIN_TIMEOUT'],
  SENTE_ILLEGAL_MOVE: ['GOTE_WIN_OUTE_SENNICHI'],
  GOTE_ILLEGAL_MOVE: ['SENTE_WIN_OUTE_SENNICHI'],
  SENNICHITE: ['DRAW_SENNICHI'],
  TORYO: ['SENTE_WIN_TORYO', 'GOTE_WIN_TORYO'],
  TSUMI: ['SENTE_WIN_CHECKMATE', 'GOTE_WIN_CHECKMATE'],
  KACHI: ['SENTE_WIN_ENTERINGKING', 'GOTE_WIN_ENTERINGKING']
};

$().ready(function() {
  var checked, id, j, len, onCheckboxChange, ref, results, user;
  $(':checkbox').radiocheck();
  user = Utl.getLs('USERNAME');
  if (user === null) {
    $('#modal_change_user').modal();
  } else {
    $('#user_name_input').val(user);
    window.getIndexes(user);
  }
  $('#start').on('click', function() {
    return window.setUser($('#user_name_input').val());
  });
  $('#open_user').on('click', function() {
    if (!window.isGettingList) {
      return $('#modal_change_user').modal();
    }
  });
  $('#copy').on('click', function() {
    return window.execCopy($('#clipboard').html());
  });
  onCheckboxChange = function() {
    return Utl.setLs('CHECKED_' + $(this).attr('id'), $(this).prop('checked'));
  };
  $('#10m, #sb, #s1, #only1page').on('change', onCheckboxChange);
  ref = ['10m', 'sb', 's1', 'only1page'];
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    id = ref[j];
    checked = Utl.getLs('CHECKED_' + id);
    if (checked !== null) {
      $('#' + id).prop('checked', checked);
    }
    results.push(onCheckboxChange($('#' + id)));
  }
  return results;
});

window.setUser = function(user) {
  Utl.setLs('USERNAME', user);
  return window.getIndexes(user);
};

window.getKifu = function() {
  var url;
  url = 'http://localhost:7777/https:' + $(this).attr('dt-url');
  window.getKifuData = {
    sente: $(this).attr('dt-sente'),
    gote: $(this).attr('dt-gote'),
    game_type: $(this).attr('dt-gametype')
  };
  return window.getKifuCall(url);
};

window.getKifuCall = function(url) {
  if (url == null) {
    url = null;
  }
  if (url !== null) {
    window.url = url;
  }
  console.log(window.url);
  return $.getJSON(window.url).done(window.getKifuCallbackSuccess).fail(window.getKifuCallbackFail);
};

window.getKifuCallbackFail = function() {
  return window.getKifuCall();
};

window.getKifuCallbackSuccess = function(response) {
  var csa, res;
  response = response['response'];
  res = response.match(/receiveMove\("([^"]+)"\);/)[1].split("\t");
  csa = window.sw2csa(res);
  $('#clipboard').html(csa);
  return $('#modal_clipboard').modal();
};

window.sw2csa = function(sw) {
  var buf, isFirst, j, len, name, ref, rest, restTime, restTimes, s, te;
  buf = '';
  buf += 'V2.2' + "\n";
  buf += 'N+' + window.getKifuData.sente + "\n";
  buf += 'N-' + window.getKifuData.gote + "\n";
  buf += '$SITE:将棋ウォーズ(' + window.getKifuData.game_type + ')' + "\n";
  buf += '$TIME_LIMIT:';
  buf += (function() {
    switch (window.getKifuData.game_type) {
      case '10秒':
        return '00:00+10';
      case '3分':
        return '00:03+00';
      default:
        return '00:10+00';
    }
  })();
  buf += "\n";
  buf += 'PI' + "\n";
  buf += "+\n";
  restTime = (function() {
    switch (window.getKifuData.game_type) {
      case '10秒':
        return 60 * 60;
      case '3分':
        return 60 * 3;
      default:
        return 60 * 10;
    }
  })();
  restTimes = {
    sente: restTime,
    gote: restTime
  };
  for (j = 0, len = sw.length; j < len; j++) {
    s = sw[j];
    if (window.ENDING.TIME_UP.indexOf(s) >= 0) {
      buf += "%TIME_UP\n";
    } else if (window.ENDING.SENTE_ILLEGAL_MOVE.indexOf(s) >= 0) {
      buf += "%-ILLEGAL_ACTION\n";
    } else if (window.ENDING.GOTE_ILLEGAL_MOVE.indexOf(s) >= 0) {
      buf += "%+ILLEGAL_ACTION\n";
    } else if (window.ENDING.SENNICHITE.indexOf(s) >= 0) {
      buf += "%+ILLEGAL_ACTION\n";
    } else if (window.ENDING.TORYO.indexOf(s) >= 0) {
      buf += "%TORYO\n";
    } else if (window.ENDING.KACHI.indexOf(s) >= 0) {
      buf += "%KACHI\n";
    } else if (window.ENDING.TSUMI.indexOf(s) >= 0) {
      buf += "%TSUMI\n";
    } else {
      console.log(s);
      ref = s.split(','), te = ref[0], rest = ref[1];
      isFirst = te.substr(0, 1) === '+';
      rest = Number(rest.substr(1));
      buf += te + "\n";
      name = isFirst ? 'sente' : 'gote';
      buf += 'T' + (restTimes[name] - rest) + "\n";
      restTimes[name] = rest;
    }
  }
  return buf;
};

window.finish = function() {
  console.log('finished.');
  window.draw();
  return window.isGettingList = false;
};

window.draw = function() {
  var dt, game_type, game_type_class, is_first, is_friend, is_win, j, len, my_name, my_rank, op_name, op_rank, ref, res, results, tbody, tr, url;
  window.results.sort(function(a, b) {
    return b.date - a.date;
  });
  $('#user_name').html(window.myName);
  tbody = $('#result').find('table').find('tbody');
  tbody.html('');
  ref = window.results;
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    res = ref[j];
    is_win = res.is_win;
    is_first = res.is_first;
    is_friend = res.is_friend;
    url = res.url;
    my_rank = res.my_rank;
    my_name = res.my_name;
    op_rank = res.opponent_rank;
    op_name = res.opponent_name;
    game_type = (function() {
      switch (res.game_type) {
        case 'sb':
          return '3分';
        case 's1':
          return '10秒';
        default:
          return '10分';
      }
    })();
    game_type_class = (function() {
      switch (res.game_type) {
        case 'sb':
          return 'm3';
        case 's1':
          return 'm10';
        default:
          return 's10';
      }
    })();
    dt = window.dateFormat(res.date);
    tr = $('<tr>').append($('<td>').addClass(is_win ? 'win' : 'lose').html(my_name)).append($('<td>').addClass('center').html(my_rank)).append($('<td>').addClass(is_first ? 'sente' : 'gote').html(is_first ? '先' : '')).append($('<td>').addClass(is_first ? 'gote' : 'sente').html(is_first ? '' : '先')).append($('<td>').addClass('center').html(op_rank)).append($('<td>').addClass(is_win ? 'lose' : 'win').html(op_name)).append($('<td>').addClass(game_type_class).html(game_type)).append($('<td>').addClass('center').html(dt)).append($('<td>').addClass('center').append($('<button>').addClass('btn btn-sm btn-primary').attr('dt-url', url).attr('dt-sente', is_first ? my_name : op_name).attr('dt-gote', is_first ? op_name : my_name).attr('dt-gametype', game_type).html('コピー').on('click', window.getKifu)));
    results.push(tbody.append(tr));
  }
  return results;
};

window.getIndexes = function(userName) {
  if (window.isGettingList) {
    return;
  }
  window.isGettingList = true;
  window.results = [];
  window.myName = userName;
  window.gTypes = [];
  if ($('#10m').prop('checked')) {
    window.gTypes.push('');
  }
  if ($('#sb').prop('checked')) {
    window.gTypes.push('sb');
  }
  if ($('#s1').prop('checked')) {
    window.gTypes.push('s1');
  }
  window.getTimes = {
    '': 0,
    'sb': 0,
    's1': 0
  };
  return window.getIndex();
};

window.getIndex = function() {
  var url;
  if (window.gTypes.length <= 0) {
    return window.finish();
  }
  window.gType = window.gTypes.pop();
  url = 'https://shogiwars.heroz.jp/users/history/' + window.myName + '/web_app?locale=ja';
  if (gType !== '') {
    url += '&gtype=' + gType;
  }
  return window.getIndexCall('http://localhost:7777/' + url);
};

window.getIndexCall = function(url) {
  if (url == null) {
    url = null;
  }
  if (url !== null) {
    window.url = url;
  }
  console.log(window.url);
  return $.getJSON(window.url).done(window.getIndexCallbackSuccess).fail(window.getIndexCallbackFail);
};

window.getIndexCallbackFail = function() {
  return window.getIndexCall();
};

window.getIndexCallbackSuccess = function(response) {
  var a, content, div, doc, isFirst, isFriend, isMe, isNext, isWin, j, l, len, len1, len2, len3, name, o, parser, player, q, rank, ref, ref1, ref2, ref3, ref4, result, url;
  window.getTimes[window.gType]++;
  parser = new DOMParser();
  doc = parser.parseFromString(response['response'], "text/html");
  ref = doc.getElementsByClassName('contents');
  for (j = 0, len = ref.length; j < len; j++) {
    content = ref[j];
    result = {};
    isFirst = true;
    ref1 = content.getElementsByClassName('history_prof');
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      player = ref1[l];
      ref2 = player.getElementsByTagName('table')[0].getElementsByTagName('td')[1].innerText.split(" "), name = ref2[0], rank = ref2[1];
      isWin = player.classList.contains('win');
      isMe = window.myName === name;
      if (isMe) {
        result.my_name = name;
        result.my_rank = rank;
        result.is_win = isWin;
        result.is_first = isFirst;
      } else {
        result.opponent_name = name;
        result.opponent_rank = rank;
        result.is_win = !isWin;
      }
      isFirst = false;
    }
    result.date = new Date(content.getElementsByTagName('div')[4].innerText);
    result.url = content.getElementsByClassName('short_btn1')[0].getElementsByTagName('a')[0].getAttribute('href');
    isFriend = false;
    ref3 = content.getElementsByTagName('div');
    for (o = 0, len2 = ref3.length; o < len2; o++) {
      div = ref3[o];
      if (div.innerText === '友達') {
        isFriend = true;
        break;
      }
    }
    result.game_type = window.gType;
    window.results.push(result);
  }
  isNext = false;
  ref4 = doc.getElementsByTagName('a');
  for (q = 0, len3 = ref4.length; q < len3; q++) {
    a = ref4[q];
    if (!($('#only1page').prop('checked')) && (a.innerText === '次へ>>' || a.innerText === '次へ&gt;&gt;')) {
      if (!(window.getTimes[window.gType] >= window.GET_LIMIT)) {
        url = 'https://shogiwars.heroz.jp' + $(a).attr('href');
        window.getIndexCall('http://localhost:7777/' + url);
        isNext = true;
        break;
      }
    }
  }
  if (!isNext) {
    return window.getIndex();
  }
};

window.dateFormat = function(dt) {
  var d, h, i, m, s, w, wNames, y;
  y = dt.getFullYear();
  m = dt.getMonth() + 1;
  d = dt.getDate();
  w = dt.getDay();
  h = dt.getHours();
  i = dt.getMinutes();
  s = dt.getSeconds();
  wNames = ['日', '月', '火', '水', '木', '金', '土'];

  /*
  m = ('0' + m).slice(-2)
  d = ('0' + d).slice(-2)
   */
  h = ('0' + h).slice(-2);
  i = ('0' + i).slice(-2);
  s = ('0' + s).slice(-2);
  return m + '/' + d + ' ' + h + ':' + i;
};

window.execCopy = function(string) {
  var result, s, temp;
  temp = document.createElement('div');
  temp.appendChild(document.createElement('pre')).textContent = string;
  s = temp.style;
  s.position = 'fixed';
  s.left = '-100%';
  document.body.appendChild(temp);
  document.getSelection().selectAllChildren(temp);
  result = document.execCommand('copy');
  return document.body.removeChild(temp);
};

Utl = (function() {
  function Utl() {}

  Utl.numFormat = function(num) {
    return String(num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
  };

  Utl.rand = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  Utl.genPassword = function(length) {
    var chars, i, j, ref, res;
    if (length == null) {
      length = 4;
    }
    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    res = '';
    for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      res += chars.substr(this.rand(0, chars.length - 1), 1);
    }
    return res;
  };

  Utl.adrBar = function(url) {
    return window.history.replaceState('', '', '' + url);
  };

  Utl.getQuery = function(key, defaultValue) {
    var j, k, len, p, params, query, ref, res, v;
    if (key == null) {
      key = null;
    }
    if (defaultValue == null) {
      defaultValue = null;
    }
    query = document.location.search.substring(1);
    params = query.split('&');
    res = {};
    for (j = 0, len = params.length; j < len; j++) {
      p = params[j];
      ref = p.split('='), k = ref[0], v = ref[1];
      res[k] = v;
    }
    if (key === null) {
      return res;
    }
    if (res[key] != null) {
      return res[key];
    }
    return defaultValue;
  };

  Utl.normalize = function(num, min, max) {
    var range;
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    range = Math.abs(max - min);
    if (num < min) {
      num += range * Math.ceil(Math.abs(num - min) / range);
    } else if (max <= num) {
      num -= range * (Math.floor(Math.abs(num - max) / range) + 1);
    }
    return num;
  };

  Utl.time = function(date) {
    if (date == null) {
      date = null;
    }
    if (date === null) {
      date = new Date();
    }
    return Math.floor(+date / 1000);
  };

  Utl.militime = function(date, getAsFloat) {
    if (date == null) {
      date = null;
    }
    if (getAsFloat == null) {
      getAsFloat = false;
    }
    if (date === null) {
      date = new Date();
    }
    return +date / (getAsFloat ? 1000 : 1);
  };

  Utl.dateStr = function(date, dateSep) {
    if (date == null) {
      date = null;
    }
    if (dateSep == null) {
      dateSep = '-';
    }
    if (date === null) {
      date = new Date();
    }
    return '' + this.zerofill(date.getFullYear(), 4) + dateSep + this.zerofill(date.getMonth() + 1, 2) + dateSep + this.zerofill(date.getDate(), 2);
  };

  Utl.datetimeStr = function(date, dateSep, timeSep, betweenSep) {
    if (date == null) {
      date = null;
    }
    if (dateSep == null) {
      dateSep = '-';
    }
    if (timeSep == null) {
      timeSep = ':';
    }
    if (betweenSep == null) {
      betweenSep = ' ';
    }
    if (date === null) {
      date = new Date();
    }
    return this.dateStr(date, dateSep) + betweenSep + this.zerofill(date.getHours(), 2) + timeSep + this.zerofill(date.getMinutes(), 2) + timeSep + this.zerofill(date.getSeconds(), 2);
  };

  Utl.difftime = function(targetDate, baseDate, nowSec, nowStr, agoStr, secStr, minStr, hourStr, dayStr, monStr, yearStr) {
    var baseTime, d, diffTime, h, m, mo, targetTime, y;
    if (baseDate == null) {
      baseDate = null;
    }
    if (nowSec == null) {
      nowSec = 0;
    }
    if (nowStr == null) {
      nowStr = 'ついさっき';
    }
    if (agoStr == null) {
      agoStr = '前';
    }
    if (secStr == null) {
      secStr = '秒';
    }
    if (minStr == null) {
      minStr = '分';
    }
    if (hourStr == null) {
      hourStr = '時間';
    }
    if (dayStr == null) {
      dayStr = '日';
    }
    if (monStr == null) {
      monStr = '月';
    }
    if (yearStr == null) {
      yearStr = '年';
    }
    if (baseDate === null) {
      baseTime = this.time();
    }
    targetTime = this.time(targetDate);
    diffTime = baseTime - targetTime;
    if (diffTime < 0) {
      return null;
    }
    if (nowSec >= diffTime) {
      return nowStr;
    }
    y = Math.floor(diffTime / (60 * 60 * 24 * 30 * 12));
    if (y > 0) {
      return '' + y + yearStr + agoStr;
    }
    diffTime -= y * (60 * 60 * 24 * 30 * 12);
    mo = Math.floor(diffTime / (60 * 60 * 24 * 30));
    if (mo > 0) {
      return '' + mo + monStr + agoStr;
    }
    diffTime -= mo * (60 * 60 * 24 * 30);
    d = Math.floor(diffTime / (60 * 60 * 24));
    if (d > 0) {
      return '' + d + dayStr + agoStr;
    }
    diffTime -= d * (60 * 60 * 24);
    h = Math.floor(diffTime / (60 * 60));
    if (h > 0) {
      return '' + h + hourStr + agoStr;
    }
    diffTime -= h * (60 * 60);
    m = Math.floor(diffTime / 60);
    if (m > 0) {
      return '' + m + minStr + agoStr;
    }
    diffTime -= m * 60;
    if (diffTime > 0) {
      return '' + diffTime + secStr + agoStr;
    }
    return nowStr;
  };

  Utl.zerofill = function(num, digit) {
    return ('' + this.repeat('0', digit) + num).slice(-digit);
  };

  Utl.repeat = function(str, times) {
    return Array(1 + times).join(str);
  };

  Utl.shuffle = function(ary) {
    var i, n, ref;
    n = ary.length;
    while (n) {
      n--;
      i = this.rand(0, n);
      ref = [ary[n], ary[i]], ary[i] = ref[0], ary[n] = ref[1];
    }
    return ary;
  };

  Utl.inArray = function(needle, ary) {
    var j, len, v;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (v === needle) {
        return true;
      }
    }
    return false;
  };

  Utl.clone = function(obj) {
    var res;
    res = obj;
    if ($.isArray(obj)) {
      res = $.extend(true, [], obj);
    } else if (obj instanceof Object) {
      res = $.extend(true, {}, obj);
    }
    return res;
  };

  Utl.arrayFill = function(length, val) {
    var i, j, ref, res;
    if (val == null) {
      val = null;
    }
    res = [];
    for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      res[i] = this.clone(val);
    }
    return res;
  };

  Utl.array2dFill = function(x, y, val) {
    var j, l, ref, ref1, res, xx, yAry, yy;
    if (y == null) {
      y = null;
    }
    if (val == null) {
      val = null;
    }
    if (y === null) {
      y = x;
    }
    res = [];
    yAry = [];
    for (yy = j = 0, ref = y; 0 <= ref ? j < ref : j > ref; yy = 0 <= ref ? ++j : --j) {
      yAry[yy] = this.clone(val);
    }
    for (xx = l = 0, ref1 = x; 0 <= ref1 ? l < ref1 : l > ref1; xx = 0 <= ref1 ? ++l : --l) {
      res[xx] = this.clone(yAry);
    }
    return res;
  };

  Utl.arraySum = function(ary) {
    var j, len, sum, v;
    sum = 0;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      sum += v;
    }
    return sum;
  };

  Utl.arrayMin = function(ary) {
    var j, len, min, v;
    min = null;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (min === null || min > v) {
        min = v;
      }
    }
    return min;
  };

  Utl.arrayMax = function(ary) {
    var j, len, max, v;
    max = null;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (max === null || max < v) {
        max = v;
      }
    }
    return max;
  };

  Utl.count = function(object) {
    return Object.keys(object).length;
  };

  Utl.uuid4 = function() {
    var i, j, random, uuid;
    uuid = '';
    for (i = j = 0; j < 32; i = ++j) {
      random = Math.random() * 16 | 0;
      if (i === 8 || i === 12 || i === 16 || i === 20) {
        uuid += '-';
      }
      uuid += (i === 12 ? 4 : (i === 16 ? random & 3 | 8 : random)).toString(16);
    }
    return uuid;
  };

  Utl.delLs = function(key) {
    return localStorage.removeItem(key);
  };

  Utl.setLs = function(key, value) {
    var json;
    if (value == null) {
      value = null;
    }
    if (value === null) {
      return this.delLs(key);
    }
    json = JSON.stringify(value);
    return localStorage.setItem(key, json);
  };

  Utl.getLs = function(key) {
    var res;
    res = localStorage.getItem(key);
    try {
      res = JSON.parse(res);
    } catch (error) {
      res = null;
    }
    return res;
  };

  return Utl;

})();
